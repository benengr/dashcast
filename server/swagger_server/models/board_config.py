# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BoardConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, board_list: List[str]=None, delay: int=None):  # noqa: E501
        """BoardConfig - a model defined in Swagger

        :param board_list: The board_list of this BoardConfig.  # noqa: E501
        :type board_list: List[str]
        :param delay: The delay of this BoardConfig.  # noqa: E501
        :type delay: int
        """
        self.swagger_types = {
            'board_list': List[str],
            'delay': int
        }

        self.attribute_map = {
            'board_list': 'boardList',
            'delay': 'delay'
        }

        self._board_list = board_list
        self._delay = delay

    @classmethod
    def from_dict(cls, dikt) -> 'BoardConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoardConfig of this BoardConfig.  # noqa: E501
        :rtype: BoardConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_list(self) -> List[str]:
        """Gets the board_list of this BoardConfig.


        :return: The board_list of this BoardConfig.
        :rtype: List[str]
        """
        return self._board_list

    @board_list.setter
    def board_list(self, board_list: List[str]):
        """Sets the board_list of this BoardConfig.


        :param board_list: The board_list of this BoardConfig.
        :type board_list: List[str]
        """
        if board_list is None:
            raise ValueError("Invalid value for `board_list`, must not be `None`")  # noqa: E501

        self._board_list = board_list

    @property
    def delay(self) -> int:
        """Gets the delay of this BoardConfig.

        The number of seconds that each dashboard will display  # noqa: E501

        :return: The delay of this BoardConfig.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay: int):
        """Sets the delay of this BoardConfig.

        The number of seconds that each dashboard will display  # noqa: E501

        :param delay: The delay of this BoardConfig.
        :type delay: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay
